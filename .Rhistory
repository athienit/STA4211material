}
cv_results
# Calculate the mean and standard deviation of the cross-validation results
mean_mse <- mean(cv_results)
std_mse <- sd(cv_results)
# Print the results
cat("Mean MSE:", mean_mse, "\n")
cat("Standard Deviation of MSE:", std_mse, "\n")
# Load necessary libraries
library(boot)
library(ggdist)
library(ggplot2)
library(gghalves)
library(plyr)
help(rt)
# Generate example data, note not normal and non-constant variance
set.seed(812347)
group1 <- rt(30,df=23)*1+10
group2 <- rt(30,df=23)*2.5+12
group3 <- rt(30,df=23)*2+11
n=30
# Generate example data, note not normal and non-constant variance
set.seed(812347)
n=30
group1 <- rt(n,df=23)*1+10
group2 <- rt(n,df=23)*2.5+12
group3 <- rt(n,df=23)*2+11
# Combine the groups
data <- c(group1, group2, group3)
# Create a grouping variable
group <- rep(c("Group1", "Group2", "Group3"), each = n)
# Make dataframe and cleanup other variables
mydata=data.frame(value=data,group=factor(group))
remove(group1,group2,group3,data,group)
View(mydata)
# Plot data
ggplot(mydata, aes(x = group, y = value, fill=group)) +
ggdist::stat_halfeye(
adjust = .5, #custom bandwidth
width = .6,
.width = 0,
justification = -.3,
point_colour = NA) +
geom_boxplot(
width = .25,
outlier.shape = NA
) +
geom_point(
size = 1.3,
alpha = .3,
position = position_jitter(
seed = 1, width = .1
)
) +
coord_cartesian(xlim = c(1.2, NA), clip = "off")+
coord_flip()
# get group means and variances
ddply(mydata,~group,summarise,mean=mean(value),var=var(value))
# Define a function to calculate the pairwise mean differences
pairwise_mean_diff <- function(formula, data=NULL,indices){
dat=data[indices,]
if (inherits(formula, "formula") == FALSE) {
stop("The input model must be a formula.\n")
}
m1=aov(formula,data=dat)
resp=all.vars(formula)[1]
pred=all.vars(formula)[2]
treat=as.factor(m1$model[,pred])
r=length(levels(treat)) # number of levels
g=r*(r-1)/2  #number of all pairwise comparisons
labs=combn(levels(treat),2)
means=tapply(dat[,resp],dat[,pred],mean)
diffs=unname(-combn(means,2,diff)) #minus is to do A-B not B-A
rnames=rep(0,g)
for(i in 1:g){
rnames[i]=paste(labs[1,i],"-",labs[2,i])
}
diffs=setNames(diffs,rnames)
return(diffs)
}
# Perform bootstrap
bootstrap_results <- boot(data=mydata,statistic=pairwise_mean_diff, sim="ordinary",R = 1000,formula=value~group)
# use index=1 for 1st parameter (difference), 2 for 2nd etc
generate_results <- function(results,conf.level=0.90,bonf.adj=T) {
#Create labels
m1=aov(formula,data=dat)
resp=all.vars(formula)[1]
pred=all.vars(formula)[2]
treat=as.factor(m1$model[,pred])
r=length(levels(treat)) # number of levels
g=r*(r-1)/2  #number of all pairwise comparisons
if(bonf.adj==T){conf=round(1-(1-conf.level)/g,3)} #bonferroni adjustment
labs=combn(levels(treat),2)
rnames=rep(0,g)
for(i in 1:g){
rnames[i]=paste(labs[1,i],"-",labs[2,i])
}
# Create a loop to generate plots
num_plots=dim(results$t0)
for (i in 1:num_plots) {
# Create a new plot
plot(results,index=i)
title(paste("  |  Plot:",rnames[i]))
}
# Print the results
cat("Bootstrap results for differences:\n")
cat(rnames,sep ="\n")
print(bootstrap_results)
for (i in 1:num_plots) {
cat("\n")
cat(paste("CI for Pairwise Mean Differences:",rnames[i],"\n"))
print(boot.ci(boot.out=bootstrap_results, type="all",index=i,conf=conf)) # BCa preferred
}
cat(paste("\n Experimentwise confidence level at least",conf.level*100,"%","\n"))
}
# Get confidence intervals for pairwise mean differences
generate_results(bootstrap_results) # plot histogram for difference, do for 1:g, scroll through plots
# Get confidence intervals for pairwise mean differences
generate_results(bootstrap_results) # plot histogram for difference, do for 1:g, scroll through plots
# Define a function to calculate the pairwise mean differences
pairwise_mean_diff <- function(formula, data=NULL,indices){
dat=data[indices,]
if (inherits(formula, "formula") == FALSE) {
stop("The input model must be a formula.\n")
}
m1=aov(formula,data=dat)
resp=all.vars(formula)[1]
pred=all.vars(formula)[2]
treat=as.factor(m1$model[,pred])
r=length(levels(treat)) # number of levels
g=r*(r-1)/2  #number of all pairwise comparisons
labs=combn(levels(treat),2)
means=tapply(dat[,resp],dat[,pred],mean)
diffs=unname(-combn(means,2,diff)) #minus is to do A-B not B-A
rnames=rep(0,g)
for(i in 1:g){
rnames[i]=paste(labs[1,i],"-",labs[2,i])
}
diffs=setNames(diffs,rnames)
return(diffs)
}
View(bootstrap_results)
View(bootstrap_results)
View(mydata)
pairwise_mean_diff(value~group,data=mydata)
indices
l
poker <- read.table("http://www.stat.ufl.edu/~winner/data/poker_skill.dat",
header=F,col.names=c("skill","hand","limit","cash"))
### Fancier plot ###
library(ggplot2)
library(PupillometryR)
library(Rmisc)
View(poker)
View(poker)
poker$skill <- factor(skill); levels(skill) <- c("Expert", "Novice")
poker$hand <- factor(hand); levels(hand) <- c("Bad","Neutral","Good")
poker$limit <- factor(limit); levels(limit) <- c("Fixed","None")
poker$skill <- factor(poker$skill, labels=c("Expert", "Novice"))
poker$hand <- factor(poker$hand, labels=c("Bad","Neutral","Good"))
poker$limit <- factor(poker$limit),labels=c("Fixed","None"))
poker$limit <- factor(poker$limit,labels=c("Fixed","None"))
ddply(poker,~skill,hand,limit,summarise,mean=mean(cash))
ddply(poker,~skill+hand+limit,summarise,mean=mean(cash))
ddply(poker,~skill+limit,summarise,mean=mean(cash))
ddply(poker,~skill+hand,summarise,mean=mean(cash))
ddply(poker,~skill*hand,summarise,mean=mean(cash))
ddply(poker,~skill:hand,summarise,mean=mean(cash))
sumdat <- summarySE(poker, measurevar = "cash",
groupvars=c("skill", "hand","limit"))
sumdat
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(poker, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(attract)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(attract)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(attract)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdat, aes(x = as.numeric(attract)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(poker, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(poker, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = skill), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = skill), shape = 18) +
geom_errorbar(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = skill, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot")
View(sumdat)
View(sumdat)
poker[skill=="Expert"]
poker[poker$skill=="Expert"]
View(poker)
poker$skill=="Expert"
poker[poker$skill=="Expert",]
pokernew=poker[poker$skill=="Expert",-1]
pokernew
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(pokernew, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot")
View(sumdat)
sumdatnew=sumdat[sumdat$skill=="Expert",-1]
pokernew=poker[poker$skill=="Expert",-1]
sumdatnew=sumdat[sumdat$skill=="Expert",-1]
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(pokernew, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdatmew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot for Experts")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(pokernew, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot for Experts")
pokernew=poker[poker$skill=="Novice",-1]
sumdatnew=sumdat[sumdat$skill=="Novice",-1]
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(pokernew, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot for Novices")
par(mfrow=c(2,1))
pokernew=poker[poker$skill=="Expert",-1]
sumdatnew=sumdat[sumdat$skill=="Expert",-1]
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(pokernew, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot for Experts")
pokernew=poker[poker$skill=="Novice",-1]
sumdatnew=sumdat[sumdat$skill=="Novice",-1]
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(pokernew, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot for Novices")
library(gpubr)
install.packages("ggpubr")
# use "adjust" in violin to adjust density/historgram bandwidth
ge=ggplot(pokernew, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot for Experts")
# use "adjust" in violin to adjust density/historgram bandwidth
gn=ggplot(pokernew, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdatnew, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot for Novices")
ggarrange(ge+gn)
library(ggpubr)
ggarrange(ge,gn)
help(rremove)
help("with")
help("subset")
ggplot(poker, aes(x = hand, y = cash, fill = limit)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(hand)-.1, y = cash, colour = limit),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit), shape = 18) +
geom_errorbar(data = sumdat, aes(x = as.numeric(hand)+.1, y = cash, group = limit, colour = limit, ymin = cash-se, ymax = cash+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Interaction Plot") +
facet_wrap(~skill)
capdat=read.table("https://raw.githubusercontent.com/athienit/STA6166material/master/capsule.dat",
col.names=c("subj", "formu", "tmax"))
# Create qualitative factor variable for formu, and assign names to levels
fformu=factor(capdat$formu, levels=1:3)
levels(fformu)=c("cap_f", "cap_nf", "entct_f")
# We have to assign subj (Subject id) as a factor level or the linear model will treat
# it as a numeric (continuous) variable and fit a regression
cap=data.frame(tmax=capdat$tmax, fformu, subj=factor(capdat$subj))
attach(cap)
xtabs(tmax~subj+fformu)
#tapply(tmax,fformu,mean) # trt means
temp=tapply(tmax,subj,rank)
rtable=matrix(0,11,3,dimnames=list(c(),c("cap_f", "cap_nf", "entct_f")))
for(i in 1:11){
rtable[i,]=temp[[i]]
}
rtable
help("addmargins")
addmargins(rtable,fun=sum)
addmargins(rtable,FUN=sum)
addmargins(rtable,margin=1,FUN=sum)
View(cap)
t=3;b=11;level=0.95
require(NSM3)
cFrd(1-level,t,b)
cWNMT(1-level,t,b)
help(cWNMT)
cFrd(1-level,t,b)
cWNMT(1-level,t,b)
cFrd(1-level,t,b,method="Asymptotic")
cWNMT(1-level,t,b,method="Asymptotic")
cWNMT(1-level,t,b,method="Asymptotic")$cutoff.U
cFrd(1-level,t,b,method="Asymptotic")$cutoff.U
friedman.test2=function(formula,data=data,method=NULL,level=0.95){
require(NSM3)
y=all.vars(formula)[1]
trt=all.vars(formula)[2]
block=all.vars(formula)[3]
ranks=tapply(data[,y],data[,block],rank)
# make sure block is a factor
data[,block]=factor(data[,block])
b=length(levels(data[,block]))
t=length(levels(data[,trt]))
mat=matrix(0,b,t)
for(i in 1:b){
mat[i,]=ranks[[i]]
}
R.sum=apply(mat,2,sum)
print(paste(level*100,"%"," Pairwise CIs on rank sums"))
d=apply(-combn(R.sum,2),2,diff) # pairwise differences
d=as.array(d)
names=combn(levels(data[,trt]),2)
C=t*(t-1)/2 # number of parwise comparisons
CI=matrix(NA,C,4)
colnames(CI)=c("Difference","Lower","Upper","Differ?")
CI[,1]=d
rnames=rep(NA,C)
if(is.null(method)){
cv=cFrd(1-level,t,b)
ME=cWNMT(1-level,t,b)$cutoff.U
}else{
if(method=="Asymptotic"){
cv=cFrd(1-level,t,b,method="Asymptotic")
ME=cWNMT(1-level,t,b,method="Asymptotic")$cutoff.U
}
if(method=="Monte Carlo"){
cv=cFrd(1-level,t,b,method="Monte Carlo")
ME=cWNMT(1-level,t,b,method="Monte Carlo")$cutoff.U
}
if(method=="Exact"){
cv=cFrd(1-level,t,b,method="Exact")
ME=cWNMT(1-level,t,b,method="Exact")$cutoff.U
}
}
for(i in 1:C){
rnames[i]=paste(names[1,i],"-",names[2,i])
CI[i,2:3]=round(d[i]+c(-1,1)*ME,4)
CI[i,4]=abs(d[i])>=ME
}#end for loop
rownames(CI)=rnames
print(CI)
return(list(critical.value=cv,friedman.test(formula,data=data)))
}# function created
friedman.test2(tmax~fformu|subj,method="Asymptotic",data=cap,level=0.95)
friedman.test2(tmax~fformu|subj,method="Monte Carlo",data=cap,level=0.95)
help("friedman.test")
friedman.test2=function(formula,data=data,method=NULL,level=0.95){
require(NSM3)
y=all.vars(formula)[1]
trt=all.vars(formula)[2]
block=all.vars(formula)[3]
ranks=tapply(data[,y],data[,block],rank)
# make sure block is a factor
data[,block]=factor(data[,block])
b=length(levels(data[,block]))
t=length(levels(data[,trt]))
mat=matrix(0,b,t)
for(i in 1:b){
mat[i,]=ranks[[i]]
}
R.sum=apply(mat,2,sum)
print(paste(level*100,"%"," Pairwise CIs on rank sums"))
d=apply(-combn(R.sum,2),2,diff) # pairwise differences
d=as.array(d)
names=combn(levels(data[,trt]),2)
C=t*(t-1)/2 # number of parwise comparisons
CI=matrix(NA,C,4)
colnames(CI)=c("Difference","Lower","Upper","Differ?")
CI[,1]=d
rnames=rep(NA,C)
if(is.null(method)){
cv=cFrd(1-level,t,b)
ME=cWNMT(1-level,t,b)$cutoff.U
}else{
if(method=="Asymptotic"){
cv=cFrd(1-level,t,b,method="Asymptotic")
ME=cWNMT(1-level,t,b,method="Asymptotic")$cutoff.U
}
if(method=="Monte Carlo"){
cv=cFrd(1-level,t,b,method="Monte Carlo")
ME=cWNMT(1-level,t,b,method="Monte Carlo")$cutoff.U
}
if(method=="Exact"){
cv=cFrd(1-level,t,b,method="Exact")
ME=cWNMT(1-level,t,b,method="Exact")$cutoff.U
}
}
for(i in 1:C){
rnames[i]=paste(names[1,i],"-",names[2,i])
CI[i,2:3]=round(d[i]+c(-1,1)*ME,4)
CI[i,4]=abs(d[i])>=ME
}#end for loop
rownames(CI)=rnames
print(CI)
return(list(critical.value=cv,friedman.test(formula,data=data)$statistic))
}# function created
friedman.test2(tmax~fformu|subj,method="Monte Carlo",data=cap,level=0.95)
library(dplyr)
### ----------------Part I ----------------###
Dose=rep(c(0.2,0.4,0.8,1.6),each=3)
Product=rep(c("A","B","C"),4)
y=c(2.0,1.8,1.3,4.3,4.1,2.0,6.5,4.9,2.8,8.9,5.7,3.4)
ds=data.frame(Dose=(Dose),Product=factor(Product),Response=y)
xtabs(Response~Dose+Product,data=ds)
ds
library(car)
scatterplot(Response~Dose|Product,smooth=FALSE,reg.line=lm,data=ds)
# Notice that a log transformation on Dose may help fit a more linear relationship (try Box Cox)
summary(powerTransform(ds$Dose))
ds$ClDose=log(Dose)-mean(log(Dose)) # center quantitative predictor
# Apply the correlation transformation to numeric variables in the data frame
transform_data <- function(data) {
data %>%
mutate_at(vars(where(is.numeric)), ~cor.trans(.))
}
# Example usage:
# Assuming df is your data frame
transformed_df <- transform_data(ds)
help(mutate_at)
# Apply the correlation transformation to numeric variables in the data frame
transform_data <- function(data) {
with(data,mutate(across(where(is.numeric), ~cor.trans(.))))
}
# Example usage:
# Assuming df is your data frame
transformed_df <- transform_data(ds)
###########################################################################
######### Probably best to standardize all quantitative variables #########
###########################################################################
cor.trans=function(y){
n=length(y)
1/sqrt(n-1)*(y-mean(y))/sd(y)
}
# Apply the correlation transformation to numeric variables in the data frame
transform_data <- function(data) {
data %>%
mutate(across(where(is.numeric), ~cor.trans(.)))
}
# Example usage:
# Assuming df is your data frame
transformed_df <- transform_data(ds)
