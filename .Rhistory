ggplot(halo1, aes(x = attract, y = score, fill = essay)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 1, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(attract)-.1, y = score, colour = essay),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), shape = 18) +
#  geom_errorbar(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay, ymin = score-se, ymax = score+se), width = .05)+
#  scale_colour_brewer(palette = "Dark2")+
#  scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
ggplot(halo1, aes(x = attract, y = score, fill = essay)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.1, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(attract)-.1, y = score, colour = essay),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), shape = 18) +
#  geom_errorbar(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay, ymin = score-se, ymax = score+se), width = .05)+
#  scale_colour_brewer(palette = "Dark2")+
#  scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
ggplot(halo1, aes(x = attract, y = score, fill = essay)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.5, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(attract)-.1, y = score, colour = essay),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), shape = 18) +
#  geom_errorbar(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay, ymin = score-se, ymax = score+se), width = .05)+
#  scale_colour_brewer(palette = "Dark2")+
#  scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
ggplot(halo1, aes(x = attract, y = score, fill = essay)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(attract)-.1, y = score, colour = essay),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), shape = 18) +
#  geom_errorbar(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay, ymin = score-se, ymax = score+se), width = .05)+
#  scale_colour_brewer(palette = "Dark2")+
#  scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(halo1, aes(x = attract, y = score, fill = essay)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(attract)-.1, y = score, colour = essay),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), shape = 18) +
geom_errorbar(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay, ymin = score-se, ymax = score+se), width = .05)+
#  scale_colour_brewer(palette = "Dark2")+
#  scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(halo1, aes(x = attract, y = score, fill = essay)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(attract)-.1, y = score, colour = essay),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), shape = 18) +
geom_errorbar(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay, ymin = score-se, ymax = score+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
#  scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(halo1, aes(x = attract, y = score, fill = essay)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(attract)-.1, y = score, colour = essay),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_line(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), linetype = 2)+
geom_point(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay), shape = 18) +
geom_errorbar(data = sumdat, aes(x = as.numeric(attract)+.1, y = score, group = essay, colour = essay, ymin = score-se, ymax = score+se), width = .05)+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
sumdat <- summarySE(halo1, measurevar = "score",
groupvars=c("attract", "essay"))
sumdat
help("summarySE")
dat=read.csv("https://raw.githubusercontent.com/athienit/STA4210material/main/safe_reg.csv",header=TRUE)
reg.stand=lm(stand.y~stand.x*z,data=dat)
#####################################################
# Best to standardardize all quantitative variables #
#####################################################
# Apply correlation transformation from STA 4210
cor.trans=function(y){
n=length(y)
1/sqrt(n-1)*(y-mean(y))/sd(y)
}
dat$stand.y=cor.trans(dat$y)
dat$stand.x=cor.trans(dat$x)
dat$x
dat$stand.x=cor.trans(dat$x1)
reg.stand=lm(stand.y~stand.x*z,data=dat)
colnames(dat)[2]=c("z")
reg.stand=lm(stand.y~stand.x*z,data=dat)
summary(reg.stand)
Dose=rep(c(0.2,0.4,0.8,1.6),each=3)
Product=rep(c("A","B","C"),4)
y=c(2.0,1.8,1.3,4.3,4.1,2.0,6.5,4.9,2.8,8.9,5.7,3.4)
ds=data.frame(Dose=(Dose),Product=factor(Product),Response=y)
xtabs(Response~Dose+Product,data=ds)
ds
ds$ClDose=cor.trans(log(ds$Dose))
# Time Periods (Fixed): Measurements made Pre-treatment 8, 16, 24, and 32 weeks (will only consider post-treatment measures)
#--------------------------------------------------------------------------------------------------------------------
rogaine=read.table("https://raw.githubusercontent.com/athienit/STA4211material/main/hair.txt",header=TRUE)
# Make sure we read factors as categorical not continuous
rogaine1=data.frame(trt=factor(rogaine$trt,labels=c("Placebo","Rogaine")), subj=factor(rogaine$subj),
time=factor(rogaine$time), hair=rogaine$hair)
attach(rogaine1)
### Check conditions
# Equal variances
library(car)
leveneTest(hair,subj)
### Sphericity (new way)
# https://www.datanovia.com/en/lessons/mauchlys-test-of-sphericity-in-r/
library(rstatix)
res <- anova_test(data = rogaine1, dv = hair, wid = subj, within = time)
res
library(ggplot2)
ggplot(data=rogaine1) +
aes(x = time, color = trt, group = trt, y = hair) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line")+
scale_x_discrete(name="Time (weeks)",labels=c("1"="8", "2"="16", "3"="24", "4"="36"))+
labs(y="Hair",color="Treatment")
# Obtain ANOVA and manualy test terms
rogaine1.mod1 = aov(hair ~ trt + trt:subj + time + trt:time)
anv=anova(rogaine1.mod1)[,1:3];anv
# Test Factor A
1-pf(anv[,3][1]/anv[,3][3],anv[,1][1],anv[,1][3])
#------------
# Can tell R to choose the correct error to test trt
rogaine1.mod2 <- aov(hair ~ trt*time + Error(subj))
summary(rogaine1.mod2)
# if trt*time was significant then bar(y)_{i.k}-bar(y)_{i'.k}
# comparisons would be made
library(plyr)
ddply(rogaine1,~trt*time,summarise,mean=mean(hair))
View(rogaine)
sp.oats=read.csv("https://raw.githubusercontent.com/athienit/STA4211material/main/oats.csv")
sp.oats <- within(sp.oats, nitroF <- factor(nitro))
head(sp(oats))
head(sp.oats))
head(sp.oats)
Input=("
Rating Officer Candidate
76  1  1
65  1  2
85  1  3
74  1  4
59  2  1
75  2  2
81  2  3
67  2  4
49  3  1
63  3  2
61  3  3
46  3  4
74  4  1
71  4  2
85  4  3
89  4  4
66  5  1
84  5  2
80  5  3
79  5  4
")
off=read.table(textConnection(Input),header=TRUE)
off$Officer=factor(off$Officer)
attach(off)
library(reshape2)
acast(off,Officer~Candidate,value.var ="Rating")
# Means vary but we are not modeling the differences in mean, just accounting for the fact they vary
library(plyr)
ddply(off,~Officer,summarise,mean=mean(Rating))
model_off=aov(Rating~Officer,data=off)
# Test sigma^2_alpha=0
anv=anova(model_off);anv
# 95% CI on grand mean
mean(Rating)+c(-1,1)*qt(0.975,4)*sqrt(anv["Officer","Mean Sq"]/(4*5))
# 95% CI on sigma^2
anv["Residuals","Sum Sq"]/qchisq(c(0.975,0.025),15)
yields=read.table("https://raw.githubusercontent.com/athienit/STA4211material/main/entozamoeba.txt",header=FALSE)
colnames(yields)=c("Condition","Yields")
yields$Condition=factor(yields$Condition)
yaov1=aov(Yields~Condition,data=yields)
formula=Yields~Condition;data=yields;
resp=all.vars(formula)[1]
resp
all.vars(formula)
pred=all.vars(formula)[2]
ranked_data=data.frame(cbind(rank(data[,resp]),data))
colnames(ranked_data)[1]=c("ranks")
rmeans=tapply(ranked_data$ranks,ranked_data[,pred],mean)
d=apply(-combn(rmeans,2),2,diff) # pairwise differences
d=apply(-combn(rmeans,2),2,diff) # pairwise differences
d
yields
choose(5,2)
t=length(levels(data[,pred]))
t
resp=all.vars(formula)[1]
pred=all.vars(formula)[2]
ranked_data=data.frame(cbind(rank(data[,resp]),data))
colnames(ranked_data)[1]=c("ranks")
rmeans=tapply(ranked_data$ranks,ranked_data[,pred],mean)
d=apply(-combn(rmeans,2),2,diff) # pairwise differences
t=length(levels(data[,pred]))
n=dim(data)[1]
g=t*(t-1)/2
lett=combn(levels(data[,pred]),2)
sizes=combn(table(data[,pred]),2)
mat=matrix(NA,g,4)
colnames(mat)=c("Diff.","Lower","Upper","Differ?")
mat[,1]=round(d,3)
rnames=rep(NA,g)
for(i in 1:g){
rnames[i]=paste(lett[1,i],"-",lett[2,i])
ME=qtukey(level,nmeans=t,df=Inf)*sqrt(n*(n+1)/24*(1/sizes[1,i]+1/sizes[2,i]))
mat[i,4]=abs(d[i])>=ME
mat[i,2:3]=round(d[i]+c(-1,1)*ME,3)
}
level=0.95
for(i in 1:g){
rnames[i]=paste(lett[1,i],"-",lett[2,i])
ME=qtukey(level,nmeans=t,df=Inf)*sqrt(n*(n+1)/24*(1/sizes[1,i]+1/sizes[2,i]))
mat[i,4]=abs(d[i])>=ME
mat[i,2:3]=round(d[i]+c(-1,1)*ME,3)
}
rownames(mat)=rnames
print(paste(level*100,"%"," Pairwise CIs"))
mat
karate <- read.table("http://www.stat.ufl.edu/~winner/sta4211/karate_board1.dat",header=T)
karate$Wood=factor(karate$Wood)
karate$Board=factor(karate$Board)
attach(karate)
require(plyr)
xtabs(n~Wood+Board,data=ddply(karate,~Wood+Board,summarise,n=length(Y))) #cell sample sizes
xtabs(Mean~Wood+Board,data=ddply(karate,~Wood+Board,summarise,Mean=mean(Y)))
#Interaction Plot
interaction.plot(Wood,Board,Y,type="b")
### Base group restriction alpha_1=beta_1=alphabeta_1j=alphabeta_i1=0 for all i,j
#options(contrasts=c('contr.treatment', 'contr.treatment'))
reg_bg=lm(Y ~ Wood*Board,data=karate)
summary(reg_bg)
# For cell {1,1} the model estimates mu_{11.} as gamma_1=mu_{...}
predict.lm(reg_bg,newdata=data.frame(Wood="1",Board="1"))
# For cell {3,2} the model estimates mu_{32.} as gamma_1+gamma_3+gamma_5+gamma_7=mu_{...}+alpha_3+beta_2+alphabeta_32
predict.lm(reg_bg,newdata=data.frame(Wood="3",Board="2"))
# Test for interaction already done but lets do it with a regression model reg_bg
reg_bg2=update(reg_bg,.~.-Board:Wood)
anova(reg_bg2,reg_bg) #full vs reduced model, one with and one without interactions
### Now to test main effects using Type II SS approach
# Test Wood
reg_bg3=update(reg_bg2,.~.-Wood)
anova(reg_bg3,reg_bg2)
# or all in one go
# note that book does things via Type III SSS
mod=aov(Y~Wood+Board+Wood:Board,data=karate)
library(car)
Anova(mod,type="II") # For unbalanced data use Type II SS
# Caution: TukeyHSD function incorporates an adjustment for sample size that produces sensible intervals for mildly unbalanced designs.
# Best done manually
TukeyHSD(aov_mod)
aov_mod=aov(formula(reg_bg2),data=karate)
# Caution: TukeyHSD function incorporates an adjustment for sample size that produces sensible intervals for mildly unbalanced designs.
# Best done manually
TukeyHSD(aov_mod)
Input="
IQ Age Method Prod
High Young B 19
High Young B 16
High Middle A 20
High Middle A 24
High Old C 25
High Old C 21
Normal Young C 24
Normal Young C 22
Normal Middle B 14
Normal Middle B 15
Normal Old A 14
Normal Old A 14
Low Young A 10
Low Young A 14
Low Middle C 12
Low Middle C 13
Low Old B 7
Low Old B 4
"
worker=read.table(textConnection(Input),header=T)
worker=read.table(textConnection(Input),header=T)
worker.LSD=aov(Prod~Method+IQ+Age,data=worker)
summary(worker.LSD)
TukeyHSD(worker.LSD, which="Method")
library(plyr)
ddply(worker, .~Method, summarize, means=mean(Prod))
ddply(worker, ~Method, summarize, means=mean(Prod))
Input="
period      subject          trt         area
1            1            1         1799
2            1            3         1846
3            1            2         2147
1            2            3         2075
2            2            2         1156
3            2            1         1777
1            3            2         1396
2            3            1          868
3            3            3         2291
1            4            2         3100
2            4            1         3065
3            4            3         4077
1            5            3         1451
2            5            2         1217
3            5            1         1288
1            6            1         3174
2            6            3         1714
3            6            2         2919
1            7            3         1430
2            7            1          836
3            7            2         1063
1            8            1         1186
2            8            2          642
3            8            3         1183
1            9            2         1135
2            9            3         1305
3            9            1          984
1           10            3          873
2           10            1         1426
3           10            2         1540
1           11            1         2061
2           11            2         2433
3           11            3         1337
1           12            2         1053
2           12            3         1534
3           12            1         1583
"
blood=read.table(textConnection(Input),header=T)
blood$period=factor(blood$period)
blood$subject=factor(blood$subject)
blood$trt=factor(blood$trt,levels=1:3,labels=LETTERS[1:3])
xtabs(as.numeric(trt)~subject+period,data=blood)
blood.LSD=aov(area~trt+period+subject,data=blood)
summary(blood.LSD)
apples=read.table("https://raw.githubusercontent.com/athienit/STA4211material/main/KutnerData/Chapter%2028%20Data%20Sets/CH28TA11.txt",header=F)
colnames(apple)=c("Sales","Pattern","Order","Trt","Store")
colnames(apples)=c("Sales","Pattern","Order","Trt","Store")
apples=read.table("https://raw.githubusercontent.com/athienit/STA4211material/main/KutnerData/Chapter%2028%20Data%20Sets/CH28TA11.txt",header=F)
colnames(apples)=c("Sales","Pattern","Order","Display","Store")
ddply(apples, ~Display, summarize, means=mean(Sales))
apples.LSD=aov(Sales~Display+Pattern+Order+Subject,data=apples)
apples.LSD=aov(Sales~Display+Pattern+Order+Store,data=apples)
summary(apples.LSD)
TukeyHSD(apples.LSD, which="Display")
apples=read.table("https://raw.githubusercontent.com/athienit/STA4211material/main/KutnerData/Chapter%2028%20Data%20Sets/CH28TA11.txt",header=F)
colnames(apples)=c("Sales","Pattern","Order","Display","Store")
apples$Pattern=as.factor(apples$Pattern)
apples$Order=as.factor(apples$Order)
apples$Display=as.factor(apples$Display)
apples$Store=as.factor(apples$Store)
ddply(apples, ~Display, summarize, means=mean(Sales))
apples.LSD=aov(Sales~Display+Pattern+Order+Store,data=apples)
summary(apples.LSD)
Input="
9  1  1  2  1
4  1  1  2  2
12  2  1  1  3
13  2  1  1  4
7  3  1  3  5
5  3  1  3  6
12  1  2  3  1
12  1  2  3  2
14  2  2  2  3
14  2  2  2  4
18  3  2  1  5
20  3  2  1  6
15  1  3  1  1
9  1  3  1  2
3  2  3  3  3
3  2  3  3  4
6  3  3  2  5
4  3  3  2  6
"
apples2=read.table(textConnection(Input))
Input="
Sales Pattern Order Display Store
9  1  1  2  1
4  1  1  2  2
12  2  1  1  3
13  2  1  1  4
7  3  1  3  5
5  3  1  3  6
12  1  2  3  1
12  1  2  3  2
14  2  2  2  3
14  2  2  2  4
18  3  2  1  5
20  3  2  1  6
15  1  3  1  1
9  1  3  1  2
3  2  3  3  3
3  2  3  3  4
6  3  3  2  5
4  3  3  2  6
"
apples2=read.table(textConnection(Input))
apples.LSD=aov(Sales~Display+Pattern+Order+Store,data=apple)
apples.LSD=aov(Sales~Display+Pattern+Order+Store,data=apples2)
apples2=read.table(textConnection(Input))
View(apples2)
View(apples2)
apples2=read.table(textConnection(Input),header=T)
apples.LSD=aov(Sales~Display+Pattern+Order+Store,data=apples2)
summary(apples.LSD)
Input="
Sales Pattern Order Display Store
9  1  1  2  1
4  1  1  2  2
12  2  1  1  3
13  2  1  1  4
7  3  1  3  5
5  3  1  3  6
12  1  2  3  1
12  1  2  3  2
14  2  2  2  3
14  2  2  2  4
18  3  2  1  5
20  3  2  1  6
15  1  3  1  1
9  1  3  1  2
3  2  3  3  3
3  2  3  3  4
6  3  3  2  5
4  3  3  2  6
"
apples=read.table(textConnection(Input),header=T)
#apples=read.table("https://raw.githubusercontent.com/athienit/STA4211material/main/KutnerData/Chapter%2028%20Data%20Sets/CH28TA11.txt",header=F)
#colnames(apples)=c("Sales","Pattern","Order","Display","Store")
apples$Pattern=as.factor(apples$Pattern)
apples$Order=as.factor(apples$Order)
apples$Display=as.factor(apples$Display)
apples$Store=as.factor(apples$Store)
ddply(apples, ~Display, summarize, means=mean(Sales))
apples.LSD=aov(Sales~Display+Pattern+Order+Store,data=apples)
summary(apples.LSD)
apples=read.table("https://raw.githubusercontent.com/athienit/STA4211material/main/KutnerData/Chapter%2028%20Data%20Sets/CH28TA11.txt",header=F)
colnames(apples)=c("Sales","Pattern","Order","Display","Store")
apples$Pattern=as.factor(apples$Pattern)
apples$Order=as.factor(apples$Order)
apples$Display=as.factor(apples$Display)
apples$Store=as.factor(apples$Store)
ddply(apples, ~Display, summarize, means=mean(Sales))
apples.LSD=aov(Sales~Display+Pattern+Order+Store:Pattern,data=apples)
summary(apples.LSD)
Input="
Sales Pattern Order Display Store
9  1  1  2  1
4  1  1  2  2
12  2  1  1  3
13  2  1  1  4
7  3  1  3  5
5  3  1  3  6
12  1  2  3  1
12  1  2  3  2
14  2  2  2  3
14  2  2  2  4
18  3  2  1  5
20  3  2  1  6
15  1  3  1  1
9  1  3  1  2
3  2  3  3  3
3  2  3  3  4
6  3  3  2  5
4  3  3  2  6
"
apples=read.table(textConnection(Input),header=T)
apples$Pattern=as.factor(apples$Pattern)
apples$Order=as.factor(apples$Order)
apples$Display=as.factor(apples$Display)
apples$Store=as.factor(apples$Store)
Input="
Sales Pattern Order Display StoreW1 StoreW2
9  1  1  2  1  1
4  1  1  2  2  2
12  2  1  1  3  1
13  2  1  1  4  2
7  3  1  3  5  1
5  3  1  3  6  2
12  1  2  3  1  1
12  1  2  3  2  2
14  2  2  2  3  1
14  2  2  2  4  2
18  3  2  1  5  1
20  3  2  1  6  2
15  1  3  1  1  1
9  1  3  1  2  2
3  2  3  3  3  1
3  2  3  3  4  2
6  3  3  2  5  1
4  3  3  2  6  2
"
apples=read.table(textConnection(Input),header=T)
apples$Pattern=as.factor(apples$Pattern)
apples$Order=as.factor(apples$Order)
apples$Display=as.factor(apples$Display)
apples$StoreW1=as.factor(apples$StoreW1)
apples$StoreW2=as.factor(apples$StoreW2)
ddply(apples, ~Display, summarize, means=mean(Sales))
apples.LSDW1=aov(Sales~Display+Pattern+Order+StoreW1,data=apples)
apples.LSDW2=aov(Sales~Display+Pattern+Order+StoreW2:Pattern,data=apples)
summary(apples.LSDW1)
summary(apples.LSDW2)
TukeyHSD(apples.LSDW1, which="Display")
